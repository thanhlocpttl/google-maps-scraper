# ==================== IMPORTS ====================
import streamlit as st
import time
import pandas as pd
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from openpyxl import Workbook
import base64

# ==================== C·∫§U H√åNH GIAO DI·ªÜN ====================
st.set_page_config(page_title="Tr√¨nh thu th·∫≠p d·ªØ li·ªáu Google Maps", page_icon="üó∫Ô∏è", layout="wide")

st.markdown("""
    <style>
        /* To√†n b·ªô n·ªÅn: M√†u tr·∫Øng h∆°i xanh nh·∫π nh√†ng */
        .main {
            background-color: #F8F9FB; /* N·ªÅn r·∫•t s√°ng */
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        /* ---------------------------------------------------- */
        /* S·ª¨A L·ªñI INHERIT: √âP BU·ªòC T·∫§T C·∫¢ VƒÇN B·∫¢N L√Ä XANH ƒê·∫¨M */
        /* ---------------------------------------------------- */
        body, 
        .main, 
        .stText, 
        .stMarkdown, 
        .stLabel, 
        .st-emotion-cache-1cpxq0x,
        .st-emotion-cache-vk3ypb,
        div, 
        span, 
        p, 
        li,
        .st-emotion-cache-1oe2x1e { 
            color: #15287a !important; 
        }

        /* Ghi ƒë√® l·∫°i m√†u ch·ªØ tr·∫Øng cho c√°c th√†nh ph·∫ßn c·∫ßn thi·∫øt */
        button[kind="primary"] * {
            color: #FFFFFF !important;
        }
        .stDownloadButton button * {
            color: #FFFFFF !important;
        }

        /* Ti√™u ƒë·ªÅ ch√≠nh H1 (T√™n ·ª©ng d·ª•ng) - D√πng XANH ƒê·∫¨M */
        h1 {
            font-size: 2.5em;
            text-align: left;
            color: #15287a !important; /* Xanh ƒë·∫≠m cho ti√™u ƒë·ªÅ */
            text-shadow: none;
            border-bottom: 3px solid #e44e06; /* D√πng Cam l√†m ƒë∆∞·ªùng ph√¢n c√°ch */
            padding-bottom: 5px;
            margin-bottom: 0.5em;
        }

        /* stSubheader H2 - D√πng XANH ƒê·∫¨M */
        h2 {
            color: #15287a !important; /* Xanh ƒë·∫≠m */
            font-weight: 600;
        }

        /* H·ªôp ch·ª©a n·ªôi dung ch√≠nh - Tr·∫Øng tinh, bo g√≥c, b√≥ng nh·∫π */
        .stContainer {
            background: #FFFFFF; /* M√†u tr·∫Øng tinh */
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
            transition: all 0.3s ease;
            border: 1px solid #15287a; /* Vi·ªÅn Xanh ƒë·∫≠m */
        }

        .stContainer:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 30px rgba(21, 40, 122, 0.15); /* B√≥ng h∆°i xanh nh·∫π */
        }
        
        /* N√∫t b·∫•m hi·ªán ƒë·∫°i (Primary) - D√πng CAM l√†m m√†u h√†nh ƒë·ªông */
        button[kind="primary"] {
            background: #e44e06; /* Cam */
            font-weight: 600;
            border-radius: 8px;
            border: none;
            box-shadow: 0 4px 10px rgba(228, 78, 6, 0.4); /* B√≥ng cam */
            transition: all 0.3s ease-in-out;
            padding: 10px 20px;
        }
        button[kind="primary"]:hover {
            background: #15287a; /* Hover chuy·ªÉn sang Xanh ƒë·∫≠m */
            transform: translateY(-1px);
            box-shadow: 0 6px 15px rgba(21, 40, 122, 0.5); /* B√≥ng xanh */
        }
        
        /* Input Text - M√†u XANH ƒê·∫¨M */
        .stTextInput > div > div > input {
            border-radius: 8px;
            border: 1px solid #15287a; /* Xanh ƒë·∫≠m */
            padding: 10px;
            color: #15287a !important; /* ƒê·∫£m b·∫£o m√†u ch·ªØ trong input l√† Xanh ƒë·∫≠m */
        }
        
        /* Thanh ti·∫øn tr√¨nh - D√πng CAM */
        .stProgress > div > div > div {
            background: #e44e06; /* Cam */
            border-radius: 5px;
        }

        /* T·∫£i xu·ªëng - N·ªïi b·∫≠t (D√πng XANH ƒê·∫¨M) */
        .stDownloadButton button {
            background: #15287a !important; /* Xanh ƒë·∫≠m */
            font-weight: bold;
            border-radius: 8px !important;
            box-shadow: 0px 5px 15px rgba(21, 40, 122, 0.4) !important; /* B√≥ng xanh */
            padding: 10px 20px !important;
        }
        
        /* Container cho h√¨nh ·∫£nh b·∫£n ƒë·ªì */
        .map-container {
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 4px 25px rgba(228, 78, 6, 0.3); /* B√≥ng cam */
        }
        .map-container img {
            width: 100%;
            height: auto;
            display: block;
        }
    </style>
""", unsafe_allow_html=True)

# ==================== TI√äU ƒê·ªÄ & M√î T·∫¢ ====================
st.markdown("""
<h1>Google Maps Data Scraper</h1>
<p>H·ªá th·ªëng chuy√™n nghi·ªáp gi√∫p tr√≠ch xu·∫•t th√¥ng tin ƒë·ªãa ƒëi·ªÉm (T√™n, ƒê·ªãa ch·ªâ, SƒêT, Website) t·ª´ Google Maps ch·ªâ v·ªõi m·ªôt t·ª´ kh√≥a.</p>
""", unsafe_allow_html=True)

# ==================== H√ÄM CRAWL GOOGLE MAPS ====================

def crawl_google_maps(query):
    # C·∫•u h√¨nh ChromeOptions cho m√¥i tr∆∞·ªùng Cloud
    options = webdriver.ChromeOptions()
    # B·ªî SUNG QUAN TR·ªåNG: Ch·ªâ ƒë·ªãnh v·ªã tr√≠ t·ªáp th·ª±c thi Chromium
    options.binary_location = '/usr/bin/chromium-browser' 
    
    options.add_argument("--headless=new") # Ch·∫ø ƒë·ªô ·∫©n danh, b·∫Øt bu·ªôc ph·∫£i c√≥ cho m√¥i tr∆∞·ªùng Cloud
    options.add_argument("--disable-gpu")
    options.add_argument("--no-sandbox") # B·∫Øt bu·ªôc cho m√¥i tr∆∞·ªùng Linux
    options.add_argument("--disable-dev-shm-usage") # T·ªëi ∆∞u h√≥a b·ªô nh·ªõ t·∫°m th·ªùi
    options.add_argument("--window-size=1920,1080")
    
    # KH·ªûI T·∫†O DRIVER S·ª¨ D·ª§NG ƒê∆Ø·ªúNG D·∫™N TR·ª∞C TI·∫æP
    # '/usr/bin/chromedriver' l√† ƒë∆∞·ªùng d·∫´n m·∫∑c ƒë·ªãnh khi c√†i ƒë·∫∑t g√≥i 'chromium' qua 'packages.txt'
    service = Service(executable_path="/usr/bin/chromedriver")
    
    # KH·ªûI T·∫†O DRIVER
    driver = webdriver.Chrome(service=service, options=options)

    st.info("ƒêang m·ªü Google Maps...")
    driver.get(f"https://www.google.com/maps/search/{query}")
    time.sleep(5)

    st.info("ƒêang thu th·∫≠p d·ªØ li·ªáu, vui l√≤ng ch·ªù...")
    data = []

    # Cu·ªôn ƒë·ªÉ t·∫£i nhi·ªÅu k·∫øt qu·∫£ h∆°n
    try:
        # T√¨m div ch·ª©a k·∫øt qu·∫£ cu·ªôn
        scrollable_div = driver.find_element(By.XPATH, "//div[contains(@aria-label, 'K·∫øt qu·∫£') or contains(@aria-label, 'Results')]")
        # Cu·ªôn 8 l·∫ßn ƒë·ªÉ t·∫£i th√™m k·∫øt qu·∫£
        for _ in range(8):
            driver.execute_script("arguments[0].scrollTop = arguments[0].scrollHeight", scrollable_div)
            time.sleep(2)
    except Exception as e:
        st.warning(f"Kh√¥ng th·ªÉ cu·ªôn danh s√°ch (L·ªói: {e}) ‚Äî c√≥ th·ªÉ giao di·ªán Google hi·ªán t·∫°i kh√°c.")

    # T√¨m t·∫•t c·∫£ c√°c link ƒë·ªãa ƒëi·ªÉm
    listings = driver.find_elements(By.XPATH, "//a[contains(@href, '/maps/place')]")
    st.write(f"T√¨m th·∫•y **{len(listings)}** ƒë·ªãa ƒëi·ªÉm.")

    progress_bar = st.progress(0)

    for i, item in enumerate(listings):
        try:
            name = item.get_attribute("aria-label") or "Kh√¥ng r√µ"
            link = item.get_attribute("href")

            # M·ªü tab chi ti·∫øt
            driver.execute_script("window.open(arguments[0], '_blank');", link)
            driver.switch_to.window(driver.window_handles[-1])
            time.sleep(4)

            # ----------- L·∫§Y ƒê·ªäA CH·ªà -----------
            address = "Kh√¥ng c√≥ ƒë·ªãa ch·ªâ"
            for xpath in [
                "//button[contains(@data-item-id, 'address')]//div[@class='Io6YTe']",
                "//div[@data-item-id='address']//div[@class='Io6YTe']",
                "//button[contains(@aria-label, 'Address')]/div",
                "//div[contains(text(), 'ƒê·ªãa ch·ªâ')]/following-sibling::div"
            ]:
                try:
                    element = driver.find_element(By.XPATH, xpath)
                    address = element.text.strip()
                    if address:
                        break
                except:
                    continue

            # ----------- L·∫§Y S·ªê ƒêI·ªÜN THO·∫†I -----------
            phone = "Kh√¥ng c√≥ s·ªë ƒëi·ªán tho·∫°i"
            for xpath in [
                "//button[contains(@data-item-id, 'phone')]//div[@class='Io6YTe']",
                "//button[contains(@aria-label, 'Phone')]/div",
                "//div[contains(text(), 'ƒêi·ªán tho·∫°i')]/following-sibling::div",
                "//div[contains(@aria-label, 'Phone')]/div"
            ]:
                try:
                    element = driver.find_element(By.XPATH, xpath)
                    phone = element.text.strip()
                    if phone:
                        break
                except:
                    continue

            # ----------- L·∫§Y WEBSITE -----------
            website = "Kh√¥ng c√≥ website"
            try:
                # ∆Øu ti√™n data-item-id='authority' cho website
                website_element = driver.find_element(By.XPATH, "//a[contains(@data-item-id, 'authority')]")
                website = website_element.get_attribute("href")
            except:
                try:
                    # T√¨m link http b·∫•t k·ª≥ trong khu v·ª±c th√¥ng tin
                    website_element = driver.find_element(By.XPATH, "//a[contains(@href, 'http')]")
                    website = website_element.get_attribute("href")
                except:
                    pass

            data.append({
                "T√™n ƒë·ªãa ƒëi·ªÉm": name,
                "ƒê·ªãa ch·ªâ": address,
                "S·ªë ƒëi·ªán tho·∫°i": phone,
                "Website": website,
                "Link Google Maps": link
            })

            driver.close()
            driver.switch_to.window(driver.window_handles[0])

        except Exception as e:
            st.warning(f"L·ªói khi x·ª≠ l√Ω ƒë·ªãa ƒëi·ªÉm {name}: {e}")
            # ƒê·∫£m b·∫£o driver lu√¥n ƒë√≥ng v√† quay l·∫°i c·ª≠a s·ªï ch√≠nh n·∫øu c√≥ l·ªói x·∫£y ra
            try:
                driver.close()
                driver.switch_to.window(driver.window_handles[0])
            except:
                pass
            continue

        progress_bar.progress((i + 1) / len(listings))

    driver.quit()
    return data


# ==================== GIAO DI·ªÜN CH√çNH (S·ª¨ D·ª§NG COLUMNS) ====================

col1, col2 = st.columns([3, 2]) # T·ª∑ l·ªá 3:2 (C·ªôt n·ªôi dung l·ªõn h∆°n)

# --- C·ªôt 1: Nh·∫≠p li·ªáu v√† K·∫øt qu·∫£ ---
with col1:
    st.subheader("C√¥ng c·ª• t√¨m ki·∫øm")
    keyword = st.text_input(
        "Nh·∫≠p t√™n c·ª≠a h√†ng, th∆∞∆°ng hi·ªáu ho·∫∑c khu v·ª±c c·∫ßn t√¨m:",
        placeholder="V√≠ d·ª•: PNJ, ti·ªám v√†ng PNJ t·∫°i TP.HCM",
        label_visibility="collapsed" # ·∫®n label ƒë·ªÉ giao di·ªán g·ªçn g√†ng h∆°n
    )

    if st.button("B·∫Øt ƒë·∫ßu thu th·∫≠p d·ªØ li·ªáu", use_container_width=True, type="primary"):
        if keyword.strip() == "":
            st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p t·ª´ kh√≥a tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu.")
        else:
            # st.session_state ƒë·ªÉ l∆∞u d·ªØ li·ªáu t·∫°m th·ªùi
            st.session_state['data'] = []
            
            with st.spinner("ƒêang x·ª≠ l√Ω, m·ªü tr√¨nh duy·ªát ·∫©n... (B∆∞·ªõc n√†y c√≥ th·ªÉ m·∫•t th·ªùi gian do Selenium ƒëang ch·∫°y)"):
                data = crawl_google_maps(keyword)
                st.session_state['data'] = data
                
            if len(data) > 0:
                df = pd.DataFrame(data)
                st.session_state['df'] = df
                st.success(f"Thu th·∫≠p th√†nh c√¥ng **{len(df)}** ƒë·ªãa ƒëi·ªÉm!")

                st.markdown("---")
                st.subheader("D·ªØ li·ªáu ƒë√£ thu th·∫≠p")
                st.dataframe(df, use_container_width=True)

                # T·∫£i v·ªÅ Excel
                excel_file = "google_maps_data.xlsx"
                df.to_excel(excel_file, index=False)
                with open(excel_file, "rb") as f:
                    st.download_button("üì• T·∫£i d·ªØ li·ªáu Excel", f, file_name=excel_file, use_container_width=True)

            else:
                st.error("‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu n√†o. H√£y th·ª≠ l·∫°i v·ªõi t·ª´ kh√≥a kh√°c.")
                
    st.markdown("</div>", unsafe_allow_html=True)

# --- C·ªôt 2: H√¨nh ·∫£nh B·∫£n ƒë·ªì ---
with col2:
    st.markdown("<h3><br>B·∫£n ƒë·ªì tr·ª±c quan</h3>", unsafe_allow_html=True) # T·∫°o kho·∫£ng tr·ªëng
    st.markdown("""
        <div class="map-container">
            <img src="https://placehold.co/400x300/15287a/FFFFFF?text=MINH+HOA+GOOGLE+MAPS" alt="H√¨nh ·∫£nh minh h·ªça Google Maps" title="Minh h·ªça giao di·ªán Google Maps" />
        </div>
        <p style='text-align: center; color: #888; font-size: 0.9em; margin-top: 10px;'>Minh h·ªça b·∫£n ƒë·ªì s·ªë</p>
    """, unsafe_allow_html=True)


st.markdown("<hr>", unsafe_allow_html=True)
